globals
    boolean b_hero1_done = false
    boolean b_hero2_done = false
    boolean b_hero3_done = false
    boolean b_sphinx_ok = false

    integer c_ghoul_max = 6
    integer c_fiend_max = 2
    integer c_abom_max = 3
    integer c_wagon_max = 2
    integer c_necro_max = 2
    integer c_banshee_max = 2
    integer c_wyrm_max = 2
    integer c_garg_max = 2
    integer c_statue_max = 1
    integer c_sphinx_max = 2

    integer c_abom = 0
    integer c_abom_done = 0
    integer c_acolyte = 0
    integer c_acolyte_done = 0
    integer c_altar_done = 0
    integer c_banshee = 0
    integer c_banshee_done = 0
    integer c_boneyard_done = 0
    integer c_citadel_done = 0
    integer c_fiend = 0
    integer c_fiend_done = 0
    integer c_food_made = 0
    integer c_food_used = 0
    integer c_garg = 0
    integer c_garg_done = 0
    integer c_ghoul_done = 0
    integer c_gold = 0
    integer c_gold_owned = 0
    integer c_grave_done = 0
    integer c_halls_done = 0
    integer c_hero1_done = 0
    integer c_hero2_done = 0
    integer c_hero3_done = 0
    integer c_mines = 0
    integer c_neclis = 0
    integer c_neclis_done = 0
    integer c_necro = 0
    integer c_necro_done = 0
    integer c_crypt_done = 0
    integer c_slaughter_done = 0
    integer c_sphinx_done = 0
    integer c_spirit_done = 0
    integer c_frost_tower_done = 0
    integer c_statue = 0
    integer c_statue_done = 0
    integer c_temple_done = 0
    integer c_tomb_done = 0
    integer c_undead_mines = 0
    integer c_wagon = 0
    integer c_wagon_done = 0
    integer c_web_fiend_done = 0
    integer c_wood = 0
    integer c_wyrm_done = 0
    integer c_zep = 0
    integer c_zig = 0
    integer c_zig_done = 0
endglobals

function set_skills takes nothing returns nothing

    set skill[1] = FROST_NOVA
    set skill[2] = FROST_ARMOR
    set skill[3] = FROST_NOVA
    set skill[4] = DARK_RITUAL
    set skill[5] = FROST_NOVA
    set skill[6] = DEATH_DECAY
    set skill[7] = FROST_ARMOR
    set skill[8] = DARK_RITUAL
    set skill[9] = FROST_ARMOR
    set skill[10] = DARK_RITUAL

    call SetSkillArray(1, LICH)
    call SetSkillArray(2, LICH)
    call SetSkillArray(3, LICH)

    set skill[1] = SLEEP
    set skill[2] = VAMP_AURA
    set skill[3] = SLEEP
    set skill[4] = CARRION_SWARM
    set skill[5] = SLEEP
    set skill[6] = INFERNO
    set skill[7] = CARRION_SWARM
    set skill[8] = VAMP_AURA
    set skill[9] = CARRION_SWARM
    set skill[10] = VAMP_AURA

    call SetSkillArray(1, DREAD_LORD)

    set skill[1] = CARRION_SWARM
    set skill[2] = SLEEP
    set skill[3] = CARRION_SWARM
    set skill[4] = VAMP_AURA
    set skill[5] = CARRION_SWARM
    set skill[6] = INFERNO
    set skill[7] = VAMP_AURA
    set skill[8] = VAMP_AURA
    set skill[9] = SLEEP
    set skill[10] = SLEEP

    call SetSkillArray(2, DREAD_LORD)
    call SetSkillArray(3, DREAD_LORD)

    set skill[1] = DEATH_COIL
    set skill[2] = UNHOLY_AURA
    set skill[3] = DEATH_COIL
    set skill[4] = UNHOLY_AURA
    set skill[5] = DEATH_COIL
    set skill[6] = ANIM_DEAD
    set skill[7] = UNHOLY_AURA
    set skill[8] = DEATH_PACT
    set skill[9] = DEATH_PACT
    set skill[10] = DEATH_PACT

    call SetSkillArray(1, DEATH_KNIGHT)
    call SetSkillArray(2, DEATH_KNIGHT)
    call SetSkillArray(3, DEATH_KNIGHT)

    set skill[1] = CARRION_SCARAB
    set skill[2] = THORNY_SHIELD
    set skill[3] = CARRION_SCARAB
    set skill[4] = IMPALE
    set skill[5] = CARRION_SCARAB
    set skill[6] = LOCUST_SWARM
    set skill[7] = THORNY_SHIELD
    set skill[8] = IMPALE
    set skill[9] = THORNY_SHIELD
    set skill[10] = IMPALE

    call SetSkillArray(1, CRYPT_LORD)

    set skill[1] = IMPALE
    set skill[2] = THORNY_SHIELD
    set skill[3] = IMPALE
    set skill[4] = THORNY_SHIELD
    set skill[5] = IMPALE
    set skill[6] = LOCUST_SWARM
    set skill[7] = THORNY_SHIELD
    set skill[8] = CARRION_SCARAB
    set skill[9] = CARRION_SCARAB
    set skill[10] = CARRION_SCARAB

    call SetSkillArray(2, CRYPT_LORD)
    call SetSkillArray(3, CRYPT_LORD)
endfunction
                                
function switch_army_build takes nothing returns nothing
    local integer buildId = GetRandomInt(1, 5)

    // Builds that didn't work:
    // Mass banshee: not casting any Possession

    if buildId == 1 then
        // Balanced build
        set c_ghoul_max = 6 // 12+
        set c_fiend_max = 2 // 6+
        set c_abom_max = 3 // 12+
        set c_wagon_max = 2 // 8+
        set c_necro_max = 2 // 4+
        set c_banshee_max = 2 // 4+
        set c_wyrm_max = 2 // 14+
        set c_garg_max = 2 // 2+
        set c_statue_max = 1 // 3+
        set c_sphinx_max = 2 // 10+
        // 75
    elseif buildId == 2 then
        // Abom and frost wyrm
        set c_ghoul_max = 0 // 0+
        set c_fiend_max = 0 // 0+
        set c_abom_max = 7 // 28+
        set c_wagon_max = 0 // 0+
        set c_necro_max = 0 // 0+
        set c_banshee_max = 0 // 0+
        set c_wyrm_max = 6 // 42+
        set c_garg_max = 0 // 0+
        set c_statue_max = 1 // 3+
        set c_sphinx_max = 0 // 0+
        // 73 foods
    elseif buildId == 3 then
        // Mass air
        set c_ghoul_max = 0 // 0+
        set c_fiend_max = 0 // 0+
        set c_abom_max = 0 // 0+
        set c_wagon_max = 0 // 0+
        set c_necro_max = 0 // 0+
        set c_banshee_max = 0 // 0+
        set c_wyrm_max = 5 // 35+
        set c_garg_max = 5 // 10+
        set c_statue_max = 0 // 9+
        set c_sphinx_max = 4 // 20+
        // 74 foods
    elseif buildId == 4 then
        // Mass necro
        set c_ghoul_max = 8 // 16+
        set c_fiend_max = 3 // 9+
        set c_abom_max = 0 // 0+
        set c_wagon_max = 3 // 12+
        set c_necro_max = 14 // 28+
        set c_banshee_max = 3 // 6+
        set c_wyrm_max = 0 // 0+
        set c_garg_max = 0 // 0+
        set c_statue_max = 1 // 3+
        set c_sphinx_max = 0 // 0+
        // 74 foods
    elseif buildId == 5 then
        // Frost wyrm only
        set c_ghoul_max = 0 // 0+
        set c_fiend_max = 0 // 0+
        set c_abom_max = 0 // 0+
        set c_wagon_max = 0 // 0+
        set c_necro_max = 0 // 0+
        set c_banshee_max = 0 // 0+
        set c_wyrm_max = 11 // 77+
        set c_garg_max = 0 // 0+
        set c_statue_max = 0 // 0+
        set c_sphinx_max = 0 // 0+
        // 77 foods
    endif
endfunction

function stop_army_build takes nothing returns nothing
    set c_ghoul_max = 0
    set c_fiend_max = 0
    set c_abom_max = 0
    set c_wagon_max = 0
    set c_necro_max = 0
    set c_banshee_max = 0
    set c_wyrm_max = 0
    set c_garg_max = 0
    set c_statue_max = 0
    set c_sphinx_max = 0
endfunction

function attack_sequence takes nothing returns nothing
    local boolean full_troop
    call Sleep(GetRandomReal(0, 10))

    loop
        call switch_army_build()

        loop
            set full_troop = c_hero1_done >= 1
            set full_troop = full_troop and c_hero2_done >= 1
            set full_troop = full_troop and c_hero3_done >= 1
            set full_troop = full_troop and c_ghoul_done >= c_ghoul_max
            set full_troop = full_troop and c_fiend_done >= c_fiend_max
            set full_troop = full_troop and c_abom_done >= c_abom_max
            set full_troop = full_troop and c_wagon_done >= c_wagon_max
            set full_troop = full_troop and c_necro_done >= c_necro_max
            set full_troop = full_troop and c_banshee_done >= c_banshee_max
            set full_troop = full_troop and c_wyrm_done >= c_wyrm_max
            set full_troop = full_troop and c_garg_done >= c_garg_max
            set full_troop = full_troop and c_statue_done >= c_statue_max
            set full_troop = full_troop and c_sphinx_done >= c_sphinx_max
            exitwhen full_troop
            call Sleep(3)
        endloop

        call stop_army_build()

        call PrepFullSuicide()
        loop
            call SuicideUnit(GetUnitCountDone(hero_id), hero_id)
            call SuicideUnit(GetUnitCountDone(hero_id2), hero_id2)
            call SuicideUnit(GetUnitCountDone(hero_id3), hero_id3)
            call SuicideUnit(GetUnitCountDone(GHOUL), GHOUL)
            call SuicideUnit(GetUnitCountDone(CRYPT_FIEND), CRYPT_FIEND)
            call SuicideUnit(GetUnitCountDone(ABOMINATION), ABOMINATION)
            call SuicideUnit(GetUnitCountDone(MEAT_WAGON), MEAT_WAGON)
            call SuicideUnit(GetUnitCountDone(NECRO), NECRO)
            call SuicideUnit(GetUnitCountDone(BANSHEE), BANSHEE)
            call SuicideUnit(GetUnitCountDone(FROST_WYRM), FROST_WYRM)
            call SuicideUnit(GetUnitCountDone(GARGOYLE), GARGOYLE)
            call SuicideUnit(GetUnitCountDone(OBS_STATUE), OBS_STATUE)
            call SuicideUnit(GetUnitCountDone(BLK_SPHINX), BLK_SPHINX)

            call Sleep(10)
            exitwhen FoodUsed() < c_acolyte + 15 + 10 // 15: heroes food, 10: buffer 
        endloop
    endloop
endfunction

function init_vars takes nothing returns nothing

    set c_abom = GetUnitCount(ABOMINATION)
    set c_abom_done = GetUnitCountDone(ABOMINATION)
    set c_acolyte = GetUnitCount(ACOLYTE)
    set c_acolyte_done = GetUnitCountDone(ACOLYTE)
    set c_altar_done = GetUnitCountDone(UNDEAD_ALTAR)
    set c_banshee = GetUnitCount(BANSHEE)
    set c_banshee_done = GetUnitCountDone(BANSHEE)
    set c_boneyard_done = GetUnitCountDone(BONEYARD)
    set c_citadel_done = GetUnitCountDone(NECROPOLIS_3)
    set c_fiend = GetUnitCount(CRYPT_FIEND)
    set c_fiend_done = GetUnitCountDone(CRYPT_FIEND)
    set c_food_made = c_neclis * GetFoodMade(NECROPOLIS_1) + c_zig * GetFoodMade(ZIGGURAT_1)
    set c_food_used = FoodUsed()
    set c_garg = TownCount(GARGOYLE)
    set c_garg_done = TownCountDone(GARGOYLE)
    set c_ghoul_done = GetUnitCountDone(GHOUL)
    set c_gold = GetGold()
    set c_gold_owned = GetGoldOwned()
    set c_grave_done = GetUnitCountDone(GRAVEYARD)
    set c_halls_done = TownCountDone(NECROPOLIS_2)
    set c_hero1_done = GetUnitCountDone(hero_id)
    set c_hero2_done = GetUnitCountDone(hero_id2)
    set c_hero3_done = GetUnitCountDone(hero_id3)
    set c_mines = GetMinesOwned()
    set c_neclis = TownCount(NECROPOLIS_1)
    set c_neclis_done = TownCountDone(NECROPOLIS_1)
    set c_necro = GetUnitCount(NECRO)
    set c_necro_done = GetUnitCountDone(NECRO)
    set c_slaughter_done = GetUnitCountDone(SLAUGHTERHOUSE)
    set c_crypt_done = GetUnitCountDone(CRYPT)
    set c_sphinx_done = GetUnitCountDone(BLK_SPHINX)
    set c_spirit_done = GetUnitCountDone(ZIGGURAT_2)
    set c_frost_tower_done = GetUnitCountDone(ZIGGURAT_FROST)
    set c_statue = GetUnitCount(OBS_STATUE)
    set c_statue_done = GetUnitCountDone(OBS_STATUE)
    set c_temple_done = GetUnitCountDone(DAMNED_TEMPLE)
    set c_tomb_done = GetUnitCountDone(TOMB_OF_RELICS)
    set c_undead_mines = GetUnitCount(UNDEAD_MINE)
    set c_wagon = GetUnitCount(MEAT_WAGON)
    set c_wagon_done = GetUnitCountDone(MEAT_WAGON)
    set c_wood = GetWood()
    set c_wyrm_done = GetUnitCountDone(FROST_WYRM)
    set c_zep = GetUnitCount(ZEPPELIN)
    set c_zig = TownCount(ZIGGURAT_1)
    set c_zig_done = TownCountDone(ZIGGURAT_1)

    set b_hero1_done = GetUnitCountDone(hero_id) >= 1
    set b_hero2_done = GetUnitCountDone(hero_id2) >= 1
    set b_hero3_done = GetUnitCountDone(hero_id3) >= 1
    set b_sphinx_ok = GetUpgradeLevel(UPG_BLK_SPHINX) > 0

    if GetUpgradeLevel(UPG_FIEND_WEB) > 0 then
        set c_web_fiend_done = c_fiend_done
    else
        set c_web_fiend_done = 0
    endif
endfunction

function set_vars takes nothing returns nothing
    loop
        call init_vars()
        call Sleep(1)
    endloop
endfunction

function undead_mine takes integer townid returns nothing
    if TownHasMine(townid) then
        call SecondaryTown(townid, 1, UNDEAD_MINE)
    endif
endfunction

function do_upgrades takes nothing returns nothing

    if c_halls_done >= 1 and c_fiend >= 1 then
        call SetBuildUpgr(1, UPG_BURROWING)
    endif

    if c_grave_done >= 1 and c_citadel_done >= 1 then
        if c_garg >= 1 then
            call SetBuildUpgr(1, UPG_STONE_FORM)
        endif

        call SetBuildUpgr(1, UPG_GHOUL_FRENZY)
    endif

    if c_boneyard_done >= 1 then
        call SetBuildUpgr(1, UPG_WYRM_BREATH)
    endif

    if c_temple_done >= 1 then
        if c_necro >= 1 then
            call SetBuildUpgr(1, UPG_NECROS)
            if c_citadel_done >= 1 then
                call SetBuildUpgr(2, UPG_NECROS)
                call SetBuildUpgr(2, UPG_SKEL_MASTERY)
            endif
        endif

        if c_banshee >= 1 then
            call SetBuildUpgr(1, UPG_BANSHEE)
            if c_citadel_done >= 1 then
                call SetBuildUpgr(2, UPG_BANSHEE)
            endif
        endif

        if c_necro >= 1 then
            call SetBuildUpgr(1, UPG_SKEL_LIFE)
        endif
    endif

    if c_grave_done >= 1 then
        call SetBuildUpgr(1, UPG_CR_ATTACK)
        call SetBuildUpgr(1, UPG_CR_ARMOR)
        call SetBuildUpgr(1, UPG_UNHOLY_STR)
        call SetBuildUpgr(1, UPG_UNHOLY_ARMOR)

        if c_halls_done >= 1 then
            call SetBuildUpgr(2, UPG_CR_ATTACK)
            call SetBuildUpgr(2, UPG_CR_ARMOR)
            call SetBuildUpgr(2, UPG_UNHOLY_STR)
            call SetBuildUpgr(2, UPG_UNHOLY_ARMOR)

            if c_citadel_done >= 1 then
                call SetBuildUpgr(3, UPG_CR_ATTACK)
                call SetBuildUpgr(3, UPG_CR_ARMOR)
                call SetBuildUpgr(3, UPG_UNHOLY_STR)
                call SetBuildUpgr(3, UPG_UNHOLY_ARMOR)
            endif
        endif
    endif

    if c_slaughter_done >= 1 and c_citadel_done >= 1 then
        if c_abom >= 1 then
            call SetBuildUpgr(1, UPG_PLAGUE)
        endif
        if c_statue >= 1 and c_tomb_done >= 1 then
            call SetBuildUpgr(1, UPG_BLK_SPHINX)
        endif
    endif

    if c_slaughter_done >= 1 and c_citadel_done >= 1 and c_wagon >= 1 and c_necro >= 1 then
        call SetBuildUpgr(1, UPG_EXHUME)
    endif
endfunction

function SetBuildBulk takes integer qty, integer unitid, integer builderQty returns nothing
    local integer has = GetUnitCount(unitid)
    if has >= qty then
        return
    endif
    call SetBuildAll(BUILD_UNIT, Min(GetUnitCountDone(unitid)+builderQty, qty), unitid, -1)
endfunction

function build_sequence takes nothing returns nothing

    call InitBuildArray()

    // get enough burrows to handle current food demand
    if c_acolyte_done >= 1 and c_food_used + 10 >= c_food_made then
        call SetBuildUnit(c_zig_done + 1, ZIGGURAT_1)
    endif

    if c_neclis_done + c_halls_done + c_citadel_done < 1 and c_acolyte > 0 then
        call SetBuildUnit(1, NECROPOLIS_1)
    endif

    // need an acolyte or nothing will get built
    if c_neclis_done >= 1 then
        call SetBuildUnit(1, ACOLYTE)
    endif

    // keep producing mines and acolytes to get gold
    call undead_mine(0)
    call undead_mine(1)

    if c_undead_mines >= 1 then
        call SetBuildNext(c_undead_mines * 5, ACOLYTE)
    endif

    // always rebuild heroes for defense
    if c_altar_done >= 1 then
        if b_hero1_done then
            if b_hero2_done then
                if b_hero3_done or c_citadel_done >= 1 then
                    call SetBuildUnit(1, hero_id3)
                endif
            else
                call SetBuildUnit(1, hero_id2)
            endif
        else
            call SetBuildUnit(1, hero_id)
        endif
    else
        call SetBuildUnit(1, UNDEAD_ALTAR)
    endif

    // build army
    if c_slaughter_done > 0 then
        if c_citadel_done > 0 then
            call SetBuildBulk(c_abom_max, ABOMINATION, c_slaughter_done)
        endif
        call SetBuildBulk(c_wagon_max, MEAT_WAGON, c_slaughter_done)
        if c_tomb_done > 0 then
            call SetBuildBulk(c_statue_max, OBS_STATUE, c_slaughter_done)
            if b_sphinx_ok then
                call Conversions(Min(c_sphinx_done + 1, c_sphinx_max), BLK_SPHINX)
            endif
        endif
    endif

    if c_crypt_done > 0 then
        call SetBuildBulk(c_ghoul_max, GHOUL, c_crypt_done)
        if c_grave_done > 0 then
            if c_citadel_done > 0 then
                call SetBuildBulk(c_garg_max, GARGOYLE, c_crypt_done)
            endif
            call SetBuildBulk(c_fiend_max, CRYPT_FIEND, c_crypt_done)
        endif
    endif

    if c_boneyard_done > 0 then
        call SetBuildBulk(c_wyrm_max, FROST_WYRM, c_boneyard_done)
    endif

    if c_temple_done > 0 then
        call SetBuildBulk(c_necro_max, NECRO, c_temple_done)
        call SetBuildBulk(c_banshee_max, BANSHEE, c_temple_done)
    endif

    // build structures
    call MeleeTownHall(0, NECROPOLIS_1)

    call SetBuildUnit(1, NECROPOLIS_1)
    call SetBuildUnit(1, CRYPT)
    call SetBuildUnit(1, GRAVEYARD)
    call SetBuildUnit(1, TOMB_OF_RELICS)
    call SetBuildUnit(1, NECROPOLIS_2)
    call SetBuildUnit(1, NECROPOLIS_3)

    call SetBuildNext(Min(c_neclis_done, c_halls_done + 1), NECROPOLIS_2)

    if c_frost_tower_done + c_spirit_done < c_zig_done then
        if c_spirit_done < c_frost_tower_done * 2 then
            call SetBuildNext(Min(c_zig_done, c_spirit_done + 1), ZIGGURAT_2)
        else
            call SetBuildNext(Min(c_zig_done, c_frost_tower_done + 1), ZIGGURAT_FROST)
        endif
    endif

    call SetBuildUnit(1, SLAUGHTERHOUSE)
    call SetBuildUnit(1, DAMNED_TEMPLE)
    call SetBuildUnit(1, SAC_PIT)
    call SetBuildUnit(1, BONEYARD)

    call BuildFactory(CRYPT)
    call BuildFactory(DAMNED_TEMPLE)
    call BuildFactory(SLAUGHTERHOUSE)
    call BuildFactory(BONEYARD)

    call undead_mine(1)
    call BasicExpansion(c_mines < 2, UNDEAD_MINE)
    call MeleeTownHall(1, NECROPOLIS_1)
    call GuardSecondary(1, 2, ZIGGURAT_1)
    call GuardSecondary(1, 2, ZIGGURAT_2)

    call undead_mine(2)
    call BasicExpansion(c_mines < 3, UNDEAD_MINE)
    call MeleeTownHall(2, NECROPOLIS_1)
    call GuardSecondary(2, 2, ZIGGURAT_1)
    call GuardSecondary(2, 2, ZIGGURAT_2)

    call do_upgrades()
endfunction

function harvest_gold takes integer townid returns nothing
    if TownHasMine(townid) then
        call HarvestGold(townid, 5)
    endif
endfunction

function peon_assignment takes nothing returns nothing
    loop
        call ClearHarvestAI()

        call harvest_gold(0)
        call harvest_gold(1)
        call harvest_gold(2)
        call harvest_gold(3)

        call build_sequence()

        call Sleep(GetRandomInt(1, 3))
    endloop
endfunction

function main takes nothing returns nothing
    set trace_on = GetAiPlayer() == 1
    call PickMeleeHero(RACE_UNDEAD)
    call set_skills()
    call StandardAI(function SkillArrays, function peon_assignment, function attack_sequence)
    call SetGroupsFlee(false)
    call SetHeroesFlee(false)
    call SetUnitsFlee(false)

    call StartThread(function set_vars)
    call PlayGame()
endfunction
